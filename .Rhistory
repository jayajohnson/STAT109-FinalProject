plot(seals_vs_year)
future_years <- data.frame(year=c(1963,2014))
pred <- data.frame(
predict(seals_vs_year,
newdata = future_years,
interval = 'prediction'
)
)
detach(pop_data)
View(pred)
View(pred)
pop_data <- data.frame(
year=c(1952,1955,1958,1961,1953,1956,1959),
seals=c(724,1392,1212,1980,176,1392,1672)
)
attach(pop_data)
seals_vs_year <- lm(seals ~ year)
summary(seals_vs_year)
plot(year, seals, main="Seal population by year")
plot(seals_vs_year)
future_years <- data.frame(year=c(1963,2014))
pred <- data.frame(
predict(seals_vs_year,
newdata = future_years,
interval = 'prediction'
)
); pred
detach(pop_data)
View(seals_vs_year)
View(seals_vs_year)
View(pop_data)
View(pop_data)
pop_data <- data.frame(
year=c(1952,1955,1958,1961,1953,1956,1959,1962,1954,1957,1960),
seals=c(724,1392,1212,1980,176,1392,1672,2116,920,1448,2068)
)
attach(pop_data)
seals_vs_year <- lm(seals ~ year)
summary(seals_vs_year)
plot(year, seals, main="Seal population by year")
plot(seals_vs_year)
future_years <- data.frame(year=c(1963,2014))
pred <- data.frame(
predict(seals_vs_year,
newdata = future_years,
interval = 'prediction'
)
); pred
detach(pop_data)
library(ISLR)
install.packages("ISLR")
library(ISLR)
Auto
linreg <- lm(mpg ~ horsepower, Auto)
linreg
linreg$coefficients
linreg$coefficients$(Intercept)
linreg$coefficients$[(Intercept)]
linreg$coefficients$[1]
linreg$coefficients[1]
linreg
plot(Auto$mpg, Auto$horsepower)
plot(Auto$mpg-39.9359, Auto$horsepower)
plot(Auto$mpg, Auto$horsepower)
plot(Auto$mpg, Auto$horsepower-39.9)
plot(Auto$mpg, Auto$horsepower)
resid(linreg)
plot(Auto$mpg, resid(linreg))
linreg
plot(Auto$mpg, Auto$horsepower)
-log(runif(1,0,1))/2
-log(runif(1,0,1))/2
-log(runif(1,0,1))/2
-log(runif(1,0,1))/2
-log(runif(1,0,1))/2
-log(runif(1,0,1))/2
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(100,0,1)))
mean(-log(runif(1000,0,1)))
mean(-log(runif(1000,0,1)))
mean(-log(runif(100000,0,1)))
mean(-log(runif(100000,0,1)))
mean(-log(runif(100000,0,1)))
mean(-log(runif(1000000,0,1)))
a1 <- c(2,1,0,1)
a2 <- c(1,1,3,2)
a3 <- c(2,0,2,1)
a4 <- c(1,0,4,2)
A <- rbind(a1,a2,a3,a4)
View(A)
View(A)
sum(dbinom(0:20,20,0.6))
sum(rbinom(0:20,20,0.6))
sum(pbinom(0:20,20,0.6, lower.tail = TRUE))
sum(pbinom(0:20,20,0.6, lower.tail = FALSE))
sum((0:20)*pbinom(0:20,20,0.6))
hist(rpois(10000,4), prob = TRUE)
hist(rpois(10000,4), prob = TRUE)
hist(dpois(x,4))
hist(dpois(x,4))
hist(dpois(1:15,4))
barplot(rpois(10000,4))
machine_regression <- lm(expense ~ usage, machine_data)
usage <- c(13,10,20,28,32,17,24,31,40,38)
expense <- c(17,22,30,37,47,30.5,32.5,39,51.5,40)
machine_data <- data.frame(usage=usage, expense=expense)
machine_regression <- lm(expense ~ usage, machine_data)
summary(machine_regression)
log_density <- log(oddbooks$density)
oddbooks$area <- oddbooks$height * oddbooks$breadth
library(DAAG)
oddbooks$area <- oddbooks$height * oddbooks$breadth
oddbooks$volume <- oddbooks$thick * oddbooks$area
oddbooks$density <- oddbooks$weight / oddbooks$volume
log_weight <- log(oddbooks$weight)
log_volume <- log(oddbooks$volume)
plot(log_volume, log_weight)
weight_vs_volume <- lm(log(weight) ~ log(volume), oddbooks)
abline(a=-8.942, b=1.696)
summary(weight_vs_volume)
log_weight <- log(oddbooks$weight)
log_area <- log(oddbooks$area)
plot(log_area, log_weight)
weight_vs_area <- lm(log(weight) ~ log(area), oddbooks)
abline(a=1.697, b=0.793)
summary(weight_vs_area)
log_density <- log(oddbooks$density)
log_volume <- log(oddbooks$volume)
plot(log_volume, log_density)
density_vs_volume <- lm(log(density) ~ log(volume), oddbooks)
abline(a=-8.942, b=1.696) # edit this
summary(density_vs_volume)
log_area <- log(oddbooks$area)
plot(log_area, log_density)
density_vs_area <- lm(log(density) ~ log(area), oddbooks)
abline(a=1.697, b=0.793) # edit this
summary(density_vs_area)
log_density <- log(oddbooks$density)
log_volume <- log(oddbooks$volume)
plot(log_volume, log_density)
density_vs_volume <- lm(log(density) ~ log(volume), oddbooks)
abline(a=-8.942, b=0.696)
summary(density_vs_volume)
log_area <- log(oddbooks$area)
plot(log_area, log_density)
density_vs_area <- lm(log(density) ~ log(area), oddbooks)
abline(a=-5.109, b=0.419)
summary(density_vs_area)
heights <- c(68,64,62,65,66)
weights <- c(132,108,102,115,128)
swimmers <- data.frame(heights=heights, weights=weights)
plot(swimmers)
abline(a=-240.5, b=5.5)
swim_regression <- lm(weights ~ heights, swimmers)
summary(swim_regression)
plot(swim_regression)
oddbooks$area <- oddbooks$height * oddbooks$breadth
oddbooks$volume <- oddbooks$thick * oddbooks$area
oddbooks$density <- oddbooks$weight / oddbooks$volume
log_weight <- log(oddbooks$weight)
log_volume <- log(oddbooks$volume)
plot(log_volume, log_weight)
weight_vs_volume <- lm(log(weight) ~ log(volume), oddbooks)
abline(a=-8.942, b=1.696)
summary(weight_vs_volume)
log_weight <- log(oddbooks$weight)
log_area <- log(oddbooks$area)
plot(log_area, log_weight, main="log(weight) vs log(area)")
weight_vs_area <- lm(log(weight) ~ log(area), oddbooks)
abline(a=1.697, b=0.793)
summary(weight_vs_area)
det(cbind(c(1,-1,-1,-1),c(-1,1,-1,-1),c(-1,-1,1,-1),c(-1,-1,-1,1)))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
for (i in 1:52) {
cases <- cases_data[1:14,i+2]
deaths <- deaths_data[1:14,i+2]
unemp_chg <- unemployment_changes[,i+2]
cases_vs_unemp <- lm(unemp_chg ~ cases)
deaths_vs_unemp <- lm(unemp_chg ~ deaths)
summary(cases_vs_unemp)
summary(deaths_vs_unemp)
#   plot(cases,unemp_chg, main=paste(colnames(unemployment_changes)[i+2],"unemployment change vs cases"))
#   abline(cases_vs_unemp$coefficients[[1]],cases_vs_unemp$coefficients[[2]])
#   plot(deaths, unemp_chg, main=paste(colnames(unemployment_changes)[i+2],"unemployment change vs deaths"))
#   abline(deaths_vs_unemp$coefficients[[1]],deaths_vs_unemp$coefficients[[2]])
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
bls_unemployment_data <- read.csv("rawdata/Unemployment by state 2020-2021.csv")[,c(1,2,3,4,11)]
# List of state names:
state_names <- bls_unemployment_data$State[1:53]
# Initialize empty matrix
unemployment_data <- data.frame(matrix(ncol=55,nrow=15))
# Label matrix with state names
colnames(unemployment_data) <- c("Year", "Month", state_names)
# Initialize dates
unemployment_data$Year <- c(rep(2020,12),rep(2021,3))
unemployment_data$Month <- c(1:12, 1:3)
# Fill in matrix with data from the BLS file
for (m in 1:15) {
for (s in 1:53) {
unemployment_data[m,s+2]<-bls_unemployment_data[s+53*(m-1),5]
}
}
# Save the cleaned data
write.csv(unemployment_data,"output/unemployment data.csv")
# Define helper functions to extract the year, month, and day of a COVID report:
year_num <- function(x) {
as.numeric(substr(x,1,4))
}
month_num <- function(x) {
as.numeric(substr(x,6,7))
}
day_num <- function(x) {
as.numeric(substr(x,9,10))
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
bls_unemployment_data <- read.csv("rawdata/Unemployment by state 2020-2021.csv")[,c(1,2,3,4,11)]
# List of state names:
state_names <- bls_unemployment_data$State[1:53]
# Initialize empty matrix
unemployment_data <- data.frame(matrix(ncol=55,nrow=15))
# Label matrix with state names
colnames(unemployment_data) <- c("Year", "Month", state_names)
# Initialize dates
unemployment_data$Year <- c(rep(2020,12),rep(2021,3))
unemployment_data$Month <- c(1:12, 1:3)
# Fill in matrix with data from the BLS file
for (m in 1:15) {
for (s in 1:53) {
unemployment_data[m,s+2]<-bls_unemployment_data[s+53*(m-1),5]
}
}
# Save the cleaned data
write.csv(unemployment_data,"output/unemployment data.csv")
# Define helper functions to extract the year, month, and day of a COVID report:
year_num <- function(x) {
as.numeric(substr(x,1,4))
}
month_num <- function(x) {
as.numeric(substr(x,6,7))
}
day_num <- function(x) {
as.numeric(substr(x,9,10))
}
# Read dataset of daily COVID cases and deaths for each state
covid_by_state <- read.csv("rawdata/COVID cases by state.csv")[,c(1,2,3,6,8,11)]
# Parse date strings from the file
covid_by_state$submission_date <- as.Date(covid_by_state$submission_date, format = "%m/%d/%Y")
# Get the year, month, and day using the helper functions:
covid_by_state$year <- year_num(covid_by_state$submission_date)
covid_by_state$month <- month_num(covid_by_state$submission_date)
covid_by_state$day <- day_num(covid_by_state$submission_date)
# Sort dataframe by location and date
attach(covid_by_state)
covid_by_state <- covid_by_state[order(year, month, day, state),]
detach(covid_by_state)
covid_data <- covid_by_state %>%
group_by(state, year, month) %>%
summarize(cases=sum(new_case),deaths=sum(new_death))
# Copy the monthly unemployment data table:
cases_data <- unemployment_data[,1:2]
cases_data[16,] <- c(2021,4)
deaths_data <- unemployment_data[,1:2]
deaths_data[16,] <- c(2021,4)
# Fill in the monthly COVID case and deaths dataframes:
for (s in 1:60) {
cases_data[s+2] <- rep(0,16)
colnames(cases_data)[s+2] <- covid_data$state[1+16*(s-1)]
deaths_data[s+2] <- rep(0,16)
colnames(deaths_data)[s+2] <- covid_data$state[1+16*(s-1)]
for (m in 1:16) {
cases_data[m,s+2] <- covid_data[1+16*(s-1)+m,4]
deaths_data[m,s+2] <- covid_data[1+16*(s-1)+m,5]
}
}
cases_data <- cases_data[c(-16),c(-6,-14,-16,-31,-47,-48,-50,-57)]
deaths_data <- deaths_data[c(-16),c(-6,-14,-16,-31,-47,-48,-50,-57)]
unemployment_data <- unemployment_data[,c(-8)]
colnames(unemployment_data) <- c(
"Year","Month","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI",
"ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT",
"NE","NV","NH","NJ","NM","NY","NYC","NC","ND","OH","OK","OR","PA","RI","SC",
"SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"
)
unemployment_data <- unemployment_data[,
c(1,2,4,3,6,5,7:9,11,10,12:14,18,15:17,
19:21,24,23,22,25:26,28,27,29,37:38,
30,32,33:34,31,35,36,39:48,
50,49,51,53,52,54)
]
unemployment_changes <- unemployment_data
unemployment_changes[1:14,3:54] <- unemployment_changes[2:15,3:54] - unemployment_changes[1:14,3:54]
unemployment_changes <- unemployment_changes[c(-15),]
for (i in 1:52) {
cases <- cases_data[1:14,i+2]
deaths <- deaths_data[1:14,i+2]
unemp_chg <- unemployment_changes[,i+2]
cases_vs_unemp <- lm(unemp_chg ~ cases)
deaths_vs_unemp <- lm(unemp_chg ~ deaths)
summary(cases_vs_unemp)
summary(deaths_vs_unemp)
#   plot(cases,unemp_chg, main=paste(colnames(unemployment_changes)[i+2],"unemployment change vs cases"))
#   abline(cases_vs_unemp$coefficients[[1]],cases_vs_unemp$coefficients[[2]])
#   plot(deaths, unemp_chg, main=paste(colnames(unemployment_changes)[i+2],"unemployment change vs deaths"))
#   abline(deaths_vs_unemp$coefficients[[1]],deaths_vs_unemp$coefficients[[2]])
}
View(unemployment_changes)
View(cases_data)
cases <- numeric(14*52)
deaths <- numeric(14*52)
unemp <- numeric(14*52)
for (m in 1:14) {
for (s in 1:52) {
cases[s+2+14*(m-1)] <- cases_data[m,s+2]
deaths[s+2+14*(m-1)] <- deaths_data[m,s+2]
unemp[s+2+14*(m-1)] <- unemployment_changes[m,s+2]
}
}
cases_vs_unemp <- lm(unemp ~ cases)
summary(cases_vs_unemp)
deaths_vs_unemp <- lm(unemp ~ deaths)
summary(deaths_vs_unemp)
sd(cases)
mean(cases)
mode(cases)
cases[100:200]
cases[55:104]
View(cases_data)
cases <- numeric(14*52)
deaths <- numeric(14*52)
unemp <- numeric(14*52)
for (m in 1:14) {
for (s in 1:52) {
cases[s+14*(m-1)] <- cases_data[m,s+2]
deaths[s+14*(m-1)] <- deaths_data[m,s+2]
unemp[s+14*(m-1)] <- unemployment_changes[m,s+2]
}
}
cases_vs_unemp <- lm(unemp ~ cases)
summary(cases_vs_unemp)
deaths_vs_unemp <- lm(unemp ~ deaths)
summary(deaths_vs_unemp)
View(cases_data)
View(cases_data)
cases[55:104]
View(cases_data)
View(cases_data)
cases[728]
cases <- numeric(14*52)
deaths <- numeric(14*52)
unemp <- numeric(14*52)
for (m in 1:14) {
for (s in 1:52) {
cases[s+52*(m-1)] <- cases_data[m,s+2]
deaths[s+52*(m-1)] <- deaths_data[m,s+2]
unemp[s+52*(m-1)] <- unemployment_changes[m,s+2]
}
}
cases_vs_unemp <- lm(unemp ~ cases)
summary(cases_vs_unemp)
deaths_vs_unemp <- lm(unemp ~ deaths)
summary(deaths_vs_unemp)
cases[55:104]
View(cases_data)
cases[728]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
bls_unemployment_data <- read.csv("rawdata/Unemployment by state 2020-2021.csv")[,c(1,2,3,4,11)]
# List of state names:
state_names <- bls_unemployment_data$State[1:53]
# Initialize empty matrix
unemployment_data <- data.frame(matrix(ncol=55,nrow=15))
# Label matrix with state names
colnames(unemployment_data) <- c("Year", "Month", state_names)
# Initialize dates
unemployment_data$Year <- c(rep(2020,12),rep(2021,3))
unemployment_data$Month <- c(1:12, 1:3)
# Fill in matrix with data from the BLS file
for (m in 1:15) {
for (s in 1:53) {
unemployment_data[m,s+2]<-bls_unemployment_data[s+53*(m-1),5]
}
}
# Save the cleaned data
write.csv(unemployment_data,"output/unemployment data.csv")
View(unemployment_data)
# Define helper functions to extract the year, month, and day of a COVID report:
year_num <- function(x) {
as.numeric(substr(x,1,4))
}
month_num <- function(x) {
as.numeric(substr(x,6,7))
}
day_num <- function(x) {
as.numeric(substr(x,9,10))
}
# Read dataset of daily COVID cases and deaths for each state
covid_by_state <- read.csv("rawdata/COVID cases by state.csv")[,c(1,2,3,6,8,11)]
# Parse date strings from the file
covid_by_state$submission_date <- as.Date(covid_by_state$submission_date, format = "%m/%d/%Y")
# Get the year, month, and day using the helper functions:
covid_by_state$year <- year_num(covid_by_state$submission_date)
covid_by_state$month <- month_num(covid_by_state$submission_date)
covid_by_state$day <- day_num(covid_by_state$submission_date)
# Sort dataframe by location and date
attach(covid_by_state)
covid_by_state <- covid_by_state[order(year, month, day, state),]
detach(covid_by_state)
covid_data <- covid_by_state %>%
group_by(state, year, month) %>%
summarize(cases=sum(new_case),deaths=sum(new_death))
# Copy the monthly unemployment data table:
cases_data <- unemployment_data[,1:2]
cases_data[16,] <- c(2021,4)
deaths_data <- unemployment_data[,1:2]
deaths_data[16,] <- c(2021,4)
# Fill in the monthly COVID case and deaths dataframes:
for (s in 1:60) {
cases_data[s+2] <- rep(0,16)
colnames(cases_data)[s+2] <- covid_data$state[1+16*(s-1)]
deaths_data[s+2] <- rep(0,16)
colnames(deaths_data)[s+2] <- covid_data$state[1+16*(s-1)]
for (m in 1:16) {
cases_data[m,s+2] <- covid_data[1+16*(s-1)+m,4]
deaths_data[m,s+2] <- covid_data[1+16*(s-1)+m,5]
}
}
cases_data <- cases_data[c(-16),c(-6,-14,-16,-31,-47,-48,-50,-57)]
deaths_data <- deaths_data[c(-16),c(-6,-14,-16,-31,-47,-48,-50,-57)]
unemployment_data <- unemployment_data[,c(-8)]
colnames(unemployment_data) <- c(
"Year","Month","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI",
"ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT",
"NE","NV","NH","NJ","NM","NY","NYC","NC","ND","OH","OK","OR","PA","RI","SC",
"SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"
)
unemployment_data <- unemployment_data[,
c(1,2,4,3,6,5,7:9,11,10,12:14,18,15:17,
19:21,24,23,22,25:26,28,27,29,37:38,
30,32,33:34,31,35,36,39:48,
50,49,51,53,52,54)
]
unemployment_changes <- unemployment_data
unemployment_changes[1:14,3:54] <- unemployment_changes[2:15,3:54] - unemployment_changes[1:14,3:54]
unemployment_changes <- unemployment_changes[c(-15),]
View(unemployment_data)
View(unemployment_changes)
cases <- numeric(14*52)
deaths <- numeric(14*52)
unemp <- numeric(14*52)
for (m in 1:14) {
for (s in 1:52) {
cases[s+52*(m-1)] <- cases_data[m,s+2]
deaths[s+52*(m-1)] <- deaths_data[m,s+2]
unemp[s+52*(m-1)] <- unemployment_changes[m,s+2]
}
}
cases_vs_unemp <- lm(unemp ~ cases)
summary(cases_vs_unemp)
deaths_vs_unemp <- lm(unemp ~ deaths)
summary(deaths_vs_unemp)
View(covid_data)
View(cases_data)
write.csv(cases_data, "COVID cases by month and state.csv")
cases <- numeric(14*52)
deaths <- numeric(14*52)
unemp <- numeric(14*52)
for (m in 1:14) {
for (s in 1:52) {
cases[s+52*(m-1)] <- cases_data[m,s+2]
deaths[s+52*(m-1)] <- deaths_data[m,s+2]
unemp[s+52*(m-1)] <- unemployment_changes[m,s+2]
}
}
cases_vs_unemp <- lm(unemp ~ cases)
summary(cases_vs_unemp)
deaths_vs_unemp <- lm(unemp ~ deaths)
summary(deaths_vs_unemp)
View(cases_data)
cases[1:52]
cases[53:104]
setwd("~/GitHub/STAT109-FinalProject")
write.csv(cases_data, "output/COVID cases by month and state.csv")
cases <- numeric(14*52)
deaths <- numeric(14*52)
unemp <- numeric(14*52)
for (m in 1:14) {
for (s in 1:52) {
cases[s+52*(m-1)] <- cases_data[m,s+2]
deaths[s+52*(m-1)] <- deaths_data[m,s+2]
unemp[s+52*(m-1)] <- unemployment_changes[m,s+2]
}
}
# cases_vs_unemp <- lm(unemp ~ cases)
# summary(cases_vs_unemp)
# deaths_vs_unemp <- lm(unemp ~ deaths)
# summary(deaths_vs_unemp)
both_vs_unemp <- lm(unemp ~ cases + deaths)
summary(both_vs_unemp)
